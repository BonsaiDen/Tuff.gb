{"name":"Tuff.gb","tagline":"Tuff - An original game for the Nintendo GameBoy","body":"# Tuff\r\n\r\nTuff is an original game for Nintendo's black and white GameBoy, based on a mix of Jump'n'Run and *Metroidvania* style game elements.\r\n\r\nBelow are some older screenshots of the game to give you an impression of what it looks like, there's also a more recent [Video](http://www.youtube.com/watch?v=Xdtt6Rsvwag).\r\n\r\n### Screenshots\r\n\r\n![](http://dl.dropboxusercontent.com/u/2332843/tuff/screen1.png) . ![](http://dl.dropboxusercontent.com/u/2332843/tuff/screen2.png) \r\n\r\n![](http://dl.dropboxusercontent.com/u/2332843/tuff/screen3.png) . ![](http://dl.dropboxusercontent.com/u/2332843/tuff/screen4.png)\r\n\r\n\r\n## Development\r\n\r\nThe game, while mostly being developed on Emulators, also works on custom build flash ROM Game Paks.\r\n\r\nThere are many interesting bits and pieces under `src/core`, especially if you're interested in starting your own GameBoy development.\r\n\r\nCoding is all done in VIM while graphics, sprites and sounds are converted via custom Node.js based conversion tools. The game's world is edited via [Tiled](http://www.mapeditor.org/) and also converted into a custom binary format.\r\n\r\nMost of the game assets also get compressed with a custom LZ-Type compression routine.\r\n\r\n\r\n### How to compile\r\n\r\n1. You'll need `make`, [Node.js](https://nodejs.org) and [gbasm](https://github.com/BonsaiDen/gbasm)\r\n2. Clone the repository and `cd` into its directory\r\n3. Run `npm install .` to setup the dependencies\r\n4. Run `make` to assemble the ROM under `build/game.gb`\r\n\r\n\r\n### Emulator Tips for Development\r\n\r\n[Gambatte](https://github.com/sinamas/gambatte) and [bgb](http://bgb.bircd.org/) are by far the best emulators for developing.\r\nThey both have a big focus on accuracy and *bgb* also comes with a huge number of built-in debugging tools.\r\n\r\nOn the web [GameBoy Online](https://github.com/grantgalitz/GameBoy-Online) is probably the best of the available JavaScript based emulators out there.\r\n\r\n### Recording Gameplay Videos\r\n\r\nFor video recording [mednafen](http://mednafen.sourceforge.net/) turns out to be the simpelst solution:\r\n\r\n    mednafen -qtrecord \"game_raw.mov\" -qtrecord.vcodec png -qtrecord.h_double_threshold 144 -qtrecord.w_double_threshold 160 game.gb\r\n\r\nThis will record a uncompressed 160x144 video of the game.\r\n\r\nGetting the video YouTube ready can quickly be done with `ffmpeg`:\r\n\r\n    ffmpeg -i game_raw.mov -vf scale=480:432 -sws_flags neighbor -acodec libmp3lame -ac 1 -ab 64000 -ar 22050 -vcodec mpeg4 -flags +mv4+gmc -mbd bits -trellis 2 -b 8000k game.avi\r\n\r\n> This will scale it up, convert the audio to mp3 and the video to mpeg4, you can tweak the bitrate, but it will normally average out at around 3000kb/s for Tuff.\r\n\r\n\r\n## Copyright and License\r\n\r\n*Tuff* including all graphics, characters, ideas, sounds and maps are Copyright (c) 2014 Ivo Wetzel. All rights reserved.\r\n\r\n\r\nThe assembly code along with all conversion tools is licensed under MIT.\r\n\r\nCopyright (C) 2014 Ivo Wetzel\r\n\r\nThis program is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License\r\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}