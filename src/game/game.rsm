; Main Game Logic -------------------------------------------------------------
SECTION "GameLogic",ROM0


; Initialization --------------------------------------------------------------
game_init:

    ; setup background tile palette
    ld      a,%00000000
    ld      [corePaletteBG],a; load a into the memory pointed to by rBGP

    ; set sprite palette 0
    ld      a,%00000000  ; 3 = black      2 = light gray  1 = white  0 = transparent
    ld      [corePaletteSprite0],a 

    ; set sprite palette 1
    ld      a,%00000000  ; 3 = dark gray  2 = light gray  1 = white  0 = transparent
    ld      [corePaletteSprite1],a 

    ; Sound setup
    call    sound_enable

    ; Init game core
    ld      a,$5f
    call    map_init
    call    player_init

    
    ; Debug More or Release Mode
    ld      a,GAME_DEBUG_MODE
    cp      1
    jp      z,.debug

    ; release
    ld      a,80
    ld      [gameWaitCounter],a
    ld      a,GAME_MODE_INIT
    ld      [gameMode],a
    ret

.debug:
    call    screen_fade_in_light
    call    game_continue
    ret


; Setup Actual Game -----------------------------------------------------------
game_start:
    call    game_setup
    ld      a,1
    call    save_load_player
    ret


game_continue:
    call    game_setup
    call    save_load_from_sram
    ret


game_setup:

    ; load tile data
    ld      de,DataTileImg
    call    map_load_tileset

    ; Hud
    call    game_hud

    ld      a,GAME_MODE_PLAYING
    ld      [gameMode],a

    ret


; Main Loop -------------------------------------------------------------------
game_loop:

    ; disable everything during room updates
    ld      a,[mapRoomUpdate]
    cp      0
    ret     nz

    ; check if we're on the title screen or not
    ld      a,[gameMode]
    cp      GAME_MODE_PLAYING
    jp      z,.game

    cp      GAME_MODE_TITLE
    jp      z,.title

    cp      GAME_MODE_INIT
    jp      z,.init

    cp      GAME_MODE_LOGO
    jp      z,.logo

    cp      GAME_MODE_FADE_IN
    jp      z,.fade_in

    cp      GAME_MODE_CONTINUE
    jp      z,.continue

    cp      GAME_MODE_START
    jp      z,.start

    ret


; Gameplay
.game:
    call    player_update
    call    entity_update
    call    sprite_animate_all
    call    sound_update
    ret


; Setup logo and fade in
.init:

    ; delay
    ld      a,[gameWaitCounter]
    dec     a
    ld      [gameWaitCounter],a
    cp      0
    ret     nz

    call    game_logo

    ; setup fade in
    ld      a,GAME_MODE_LOGO
    ld      [gameMode],a
    call    screen_fade_in_light

    ; show the logo for 80 frames
    ld      a,80
    ld      [gameWaitCounter],a

    ret

; Show logo and fade out
.logo:
    ld      a,[screenFadeMode]
    cp      0
    ret     nz

    ; delay
    ld      a,[gameWaitCounter]
    dec     a
    ld      [gameWaitCounter],a
    cp      0
    ret     nz

    call    screen_fade_out_light
    ld      a,GAME_MODE_FADE_IN
    ld      [gameMode],a

    ld      a,4
    ld      [gameWaitCounter],a

    ret

; Setup title screen and fade in
.fade_in:

    ld      a,[screenFadeMode]
    cp      0
    ret     nz

    ; clear screen buffer
    ld      a,$00
    sub     128
    ld      hl,$9800
    ld      bc,512
    call    core_vram_set

    ; setup title screen room
    ld      de,DataTileImg
    call    map_load_tileset

    ; map
    ld      b,15
    ld      c,15
    call    map_set_room

    ; player
    ld      a,87
    ld      [playerX],a
    ld      a,96
    ld      [playerY],a

    ; delay
    ld      a,[gameWaitCounter]
    dec     a
    ld      [gameWaitCounter],a
    cp      0
    ret     nz

    ; fade over
    call    screen_fade_in_light
    ld      a,GAME_MODE_TITLE
    ld      [gameMode],a

    ret

; Title screen logic
.title:
    
    ; fake inputs to control player
    ld      a,[coreInputOn]
    and     %00001100
    ld      [coreInputOn],a

    ld      a,[coreInputOff]
    and     %00001100
    ld      [coreInputOff],a
    
    call    game_title_screen_movement

    ; Fake input for player update
    call    player_update
    call    sprite_animate_all
    call    sound_update

    ; Wait for start button press
    ld      a,[coreInputOn]
    and     BUTTON_START
    cp      BUTTON_START
    ret     nz

    ld      a,10
    ld      [gameWaitCounter],a

    ld      a,GAME_MODE_CONTINUE
    ld      [gameMode],a

    call    screen_fade_out_light

    ret

; Fade out and continue a existing game
.continue:
    ld      a,[screenFadeMode]
    cp      0
    ret     nz

    ; delay
    ld      a,[gameWaitCounter]
    dec     a
    ld      [gameWaitCounter],a
    cp      0
    ret     nz

    call    game_continue
    call    screen_fade_in_light

    ret

; Fade out and start a new game
.start:
    ld      a,[screenFadeMode]
    cp      0
    ret     nz

    ; delay
    ld      a,[gameWaitCounter]
    dec     a
    ld      [gameWaitCounter],a
    cp      0
    ret     nz

    call    game_start
    call    screen_fade_in_light
    ret


game_title_screen_movement:
    ld      a,[coreInput]
    and     %00001100
    ld      [coreInput],a

    ret


; Timer -----------------------------------------------------------------------
game_timer:
    ld      a,[gameTimerHalf]
    cp      1
    jp      nz,.tick

    call    player_water_timer
    call    player_sleep_timer

.tick:
    ld      a,[gameTimerHalf]
    inc     a
    and     %00000001
    ld      [gameTimerHalf],a

    call    map_animate_tiles
    call    screen_timer
    ret


; Logo ------------------------------------------------------------------------
game_logo:

    ; load title screen graphics into vram
    ld      de,DataLogoImg
    ld      hl,$8800; start target for decode write
    ld      bc,$8800 + 768; end target for decode write
    call    lz4_decode_block

    ; clear screen buffer
    ld      a,$00
    sub     128
    ld      hl,$9800
    ld      bc,512
    call    core_vram_set

    ; initial screen offset
    ld      hl,$9800 + 128
    ld      de,DataTitleLayout

    ; copy logo data into vram
    ld      b,8; 8 rows

.loop_y:
    ld      c,8; 8 bytes per row
    inc     hl
    inc     hl
    inc     hl
    inc     hl
    inc     hl
    inc     hl


.loop_x:

    ; wait for vblank
    ld      a,[rSTAT]       ; <---+
    and     STATF_BUSY      ;     |
    jr      nz,@-4          ; ----+

    ld      a,[de]
    sub     128
    ld      [hl],a
    inc     de
    inc     hl

    ; loop
    dec     c
    jp      nz,.loop_x

    ; next line
    push    bc
    ld      bc,18
    add     hl,bc
    pop     bc

    dec     b
    jp      nz,.loop_y

    ret
    

; Hud -------------------------------------------------------------------------
game_hud:
    ld      a,$bf - 128
    ld      hl,$9a00
    ld      bc,20
    call    core_vram_set
    ret

