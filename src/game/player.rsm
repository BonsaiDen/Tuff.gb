; Constants -------------------------------------------------------------------
PLAYER_GRAVITY_MAX         EQU 3
PLAYER_GRAVITY_INTERVAL    EQU 10
PLAYER_MOVE_INC_DELAY      EQU 4 ; delay until we start moving when standing still
PLAYER_MOVE_DEC_DELAY      EQU 3 ; delay until we stop moving when already moving

PLAYER_SPEED_MAX           EQU 1
PLAYER_JUMP_MAX            EQU 2
PLAYER_FALL_MAX            EQU 4

PLAYER_SLEEP_WAIT          EQU 180
PLAYER_SPRITE_INDEX        EQU 0

PLAYER_ANIMATION_IDLE      EQU 0
PLAYER_ANIMATION_WALKING   EQU 1
PLAYER_ANIMATION_SLEEP     EQU 2
PLAYER_ANIMATION_PUSHING   EQU 3

PLAYER_DIRECTION_LEFT      EQU 1
PLAYER_DIRECTION_RIGHT     EQU 2


; Player ----------------------------------------------------------------------
player_init:

    ; Position 
    ld      a,32
    ld      [playerX],a
    ld      [playerY],a

    ; Direction
    ld      a,PLAYER_DIRECTION_RIGHT
    ld      [playerDirection],a
    ld      a,255
    ld      [playerDirectionLast],a

    ; Animation
    ld      a,PLAYER_ANIMATION_IDLE
    ld      [playerAnimation],a
    ld      a,255
    ld      [playerAnimationLast],a


    ; Jumping / Falling
    ld      a,PLAYER_GRAVITY_INTERVAL
    ld      [playerGravityTick],a

    ld      a,0
    ld      [playerJumpForce],a
    ld      [playerJumpPressed],a
    ld      [playerFallSpeed],a


    ; Movement
    ld      a,0
    ld      [playerSpeedRight],a
    ld      [playerSpeedLeft],a
    ld      [playerDecTick],a

    ; Other
    ld      a,PLAYER_SLEEP_WAIT
    ld      [playerSleepTick],a

    ; Sprite
    ld      a,PLAYER_SPRITE_INDEX
    call    sprite_enable

    ret


; Player Logic ----------------------------------------------------------------
player_update:

    ; only update player every 1.5 frames
    ld      a,[playerTick]
    cp      0
    jp      nz,.no_update

    ; control / animation
    call    player_control
    call    player_move
    call    player_sleep
    call    player_animate

    ; update sprite position
    ld      a,[playerX]
    ld      b,a
    ld      a,[playerY]
    ld      c,a
    ld      a,PLAYER_SPRITE_INDEX
    call    sprite_set_position

    ; every other tick we switch the delay between 0 or 1 to 
    ; emulate moving by 1.5 pixels every frame
    ld      a,[playerTickSwitch]
    ld      [playerTick],a

    ; switch between 0 and 1
    ld      a,[playerTickSwitch]
    xor     a
    ld      [playerTickSwitch],a

    jp      .updated

.no_update:
    dec     a
    ld      [playerTick],a

.updated:
    ret


; Movement Updates ------------------------------------------------------------
player_control:
    call    player_accelerate
    call    player_decelerate
    ret


player_accelerate:

    ; check which direction is pressed
    ld      a,[inputState]
    cp      %00100000
    jp      z,.left
    cp      %00010000
    jp      z,.right

    ; not moving
    jp      .done

.right:
    ld      hl,playerSpeedRight
    ld      b,PLAYER_DIRECTION_RIGHT
    jp      .accelerate

.left:
    ld      hl,playerSpeedLeft
    ld      b,PLAYER_DIRECTION_LEFT

.accelerate:

    ; set player direction
    ld      a,b
    ld      [playerDirection],a

    ; load speed variable
    ld      a,[hl]

    ; check if max speed
    cp      PLAYER_SPEED_MAX
    jp      z,.done

    ; if not increase
    inc     a
    ld      [hl],a

.done:
    ret


player_decelerate:

    ; only decelerate on every 10th frame
    ld      a,[playerDecTick]
    inc     a
    cp      10
    jp      nz,.no_tick

.decrease_right:

    ; check if right direction is still pressed
    ld      a,[inputState]
    and     %00010000
    jp      nz,.decrease_left

    ; right
    ld      a,[playerSpeedRight]
    cp      0
    jp      z,.decrease_left
    dec     a
    ld      [playerSpeedRight],a

.decrease_left:

    ; check if left direction is still pressed
    ld      a,[inputState]
    and     %00100000
    jp      nz,.done

    ; left
    ld      a,[playerSpeedLeft]
    cp      0
    jp      z,.done
    dec     a
    ld      [playerSpeedLeft],a

    jp      .done

.done:
    ld      a,0

.no_tick:
    ld      [playerDecTick],a
    ret


; Movement Logic --------------------------------------------------------------
player_move:

    ; are we moving at all?
    ld     a,[playerSpeedLeft]
    ld     b,a
    ld     a,[playerSpeedRight]
    add    a,b
    cp     0
    jp     z,.stopped

    ld     a,PLAYER_ANIMATION_WALKING
    ld     [playerAnimation],a
    
    ; load x position
    ld     a,[playerX]
    ld     b,a

    ; move right
    ld     a,[playerSpeedRight]

.loop_right:
    inc    b
    dec    a
    cp     0
    jp     nz,.loop_right

    ; move left
    ld     a,[playerSpeedLeft]

.loop_left:
    dec    b
    dec    a
    cp     0
    jp     nz,.loop_left

    ; store new x position
    ld     a,b
    ld     [playerX],a
    jp     .done

.stopped: ; reset to idle animation
    ld     a,PLAYER_ANIMATION_IDLE
    ld     [playerAnimation],a
    jp     .done

.done:
    ret



; Animation Updates -----------------------------------------------------------
player_animate:

    ; check for animation changes
    ld      a,[playerAnimationLast]
    ld      b,a
    ld      a,[playerAnimation]
    cp      b
    jp      z,.no_animation_change
    
    ; switch to new animation
    ld      b,a
    ld      a,PLAYER_SPRITE_INDEX
    call    sprite_animation_set
    call    sprite_animation_start
    ld      a,b
    ld      [playerAnimationLast],a

.no_animation_change:

    ; check for direction changes
    ld      a,[playerDirectionLast]
    ld      b,a
    ld      a,[playerDirection]
    cp      b
    jp      z,.no_direction_change

    ; switch to new direction
    cp      PLAYER_DIRECTION_RIGHT
    jp      z,.direction_right

.direction_left:
    ld      a,PLAYER_SPRITE_INDEX
    call    sprite_unset_mirror
    jp      .direction_changed

.direction_right:
    ld      a,PLAYER_SPRITE_INDEX
    call    sprite_set_mirror
    jp      .direction_changed

.direction_changed:

    ; reset animation frame
    ld      a,PLAYER_SPRITE_INDEX
    call    sprite_animation_start

    ld      a,[playerDirection]
    ld      [playerDirectionLast],a

.no_direction_change:
    ret


; Sleep Timer -----------------------------------------------------------------
player_sleep:

    ; in case no button is pressed decrease the sleep ticker 
    ld      a,[inputState]
    and     %00110001
    jp      nz,.active

    ; check sleep ticker
    ld      a,[playerSleepTick]
    cp      0
    jp      nz,.waiting ; already sleeping

    ; set sleeping
    ld      a,PLAYER_ANIMATION_SLEEP
    ld      [playerAnimation],a
    jp      .done

.waiting:
    dec     a
    ld      [playerSleepTick],a
    jp      .done

.active:
    ld      a,PLAYER_SLEEP_WAIT
    ld      [playerSleepTick],a
    jp      .done

.done:
    ret

