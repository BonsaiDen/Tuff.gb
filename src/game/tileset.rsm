; Tileset ---------------------------------------------------------------------

; hl = sprite map pointer, b = target row in ram, c = row index in sprite map, de = target base in ram
tileset_load_sprite_row: ; load a compressed sprite row into vram

    push    bc

    ; adjust target pointer for target row
    ld      a,d 
    add     b
    ld      d,a

    ; offset into location table
    ld      b,0
    sla     c; each table entry is two bytes
    add     hl,bc ; hl = table offset data pointer

    ; read high and low byte for the offset
    ld      a,[hli]
    ld      b,a
    ld      a,[hli]
    ld      c,a; bc = offset until row data (from current table index position)

    ; create final data pointer for sprite row data
    ; the offset value is pre calcuated to be relative from the table data pointer + 2
    add     hl,bc

    ; end pointer = de + 256 bytes
    ;ld      b,d
    ;ld      c,e
    ;inc     b; 256 bytes
    call    core_decode_eom

    pop     bc
    ret


tileset_load: ; hl = source

    ; copy tiles to character data
    ld      de,$8800
    ld      a,d
    add     16; 4096 bytes
    ;ld      b,a
    ;ld      c,e
    call    core_decode_eom

    ; copy animated tiles into WRAM buffer (the last 64 tiles, 1024 bytes)
    ld      hl,$9400
    ld      de,TILE_ANIMATION_BUFFER
    ld      bc,1024
    call    core_vram_cpy

    ret

