SECTION "MapLogic",ROM0


; Map -------------------------------------------------------------------------
map_init: ; a = base value

    sub     128
    ld      hl,mapRoomBuffer
    ld      bc,512
    call    core_mem_set

    ld      hl,$9800
    ld      bc,1024
    call    core_mem_set

    ret


; Scrolling -------------------------------------------------------------------
map_scroll_left:
    ld      a,[mapRoomX]
    ld      [mapRoomLastX],a
    dec     a
    ld      b,a
    ld      a,[mapRoomY]
    ld      [mapRoomLastY],a
    ld      c,a
    call    map_set_room
    ret


map_scroll_right:
    ld      a,[mapRoomX]
    ld      [mapRoomLastX],a
    inc     a
    ld      b,a
    ld      a,[mapRoomY]
    ld      [mapRoomLastY],a
    ld      c,a
    call    map_set_room
    ret


map_scroll_down:
    ld      a,[mapRoomX]
    ld      [mapRoomLastX],a
    ld      b,a
    ld      a,[mapRoomY]
    ld      [mapRoomLastY],a
    inc     a
    ld      c,a
    call    map_set_room
    ret


map_scroll_up:
    ld      a,[mapRoomX]
    ld      [mapRoomLastX],a
    ld      b,a
    ld      a,[mapRoomY]
    ld      [mapRoomLastY],a
    dec     a
    ld      c,a
    call    map_set_room
    ret


; Map -------------------------------------------------------------------------
map_set_room: ; b = x, c = y

    push    hl
    push    de
    push    bc

    ; store new room coordinates
    ld      a,b
    ld      [mapRoomX],a
    ld      a,c
    ld      [mapRoomY],a

    ; RoomId = y * MAP_WIDTH + x
    ; RoomOffset = [MapOffset + RoomID * 2][0] and [1]
    ; MapData = (MapOffset + MapIndexSize + RoomOffset) - 1

    ; Offset into Index ------------------------

    ; y * MAP_WIDTH
    ld      h,16
    ld      e,c
    call    math_mul8b ; hl = offset into index

    ; + x
    ld      c,b
    ld      b,0
    add     hl,bc

    ; * 2
    add     hl,hl

    ; + MapOffset
    ld      bc,DataMapMain
    add     hl,bc

    ; Get Room Offset Value 
    ld      a,[hli]
    ld      b,a

    ld      a,[hl]
    ld      c,a

    ; MapOffset + Room Offset 
    ld      hl,DataMapMain
    add     hl,bc

    ; + MapIndexSize
    ld      bc,MAP_INDEX_SIZE
    add     hl,bc ; hl = pointer to packed room data

    ; unpack the data
    ld      de,mapRoomUnpackBuffer
    ld      bc,mapRoomUnpackBuffer + MAP_ROOM_SIZE + MAP_ENTITY_SIZE
    call    core_unpack_raw

    ; un/load entities
    call    entity_store ; first store them
    call    entity_reset ; then reset them, as this will clear their active flag

    ; draw the room
    ld      a,1
    ld      [mapRoomUpdate],a

    pop     bc
    pop     de
    pop     hl

    ret



; Core Map Draw Routine -------------------------------------------------------
map_load_room:
    
    ld      a,0
    ld      [mapRoomUpdate],a

    ; target is the screen buffer
    ld      hl,$C400

    ; we read from the unpacked room data
    ld      de,mapRoomUnpackBuffer - 1

    ; setup loop counts
    ld      b,8 ; row
    ld      c,0 ; col

.loop_y:

    ; y loop header
    ld      a,b
    cp      0
    jr      z,.done
    dec     b

    ; y loop body
    ld      c,10

.loop_x:

    dec     c ; reduce column counter

    ; RLE ----------------------------------------

    ; otherwise fetch the next block
    inc     de; 
    ld      a,[de]

.draw_block:

    ; draw 4 8x8 tiles
    push    hl
    push    de
    push    bc

    ; drawing ------------------------------------------
    
    ld      d,a ; save block data

    ; upper left
    ld      b,$20 ; block def row 0 offset
    ld      c,d
    ld      a,[bc] ; tile value
    sub     a,128 ; tile data offset
    ld      [hli],a ;  draw + 0


    ; upper right
    ld      b,$21 ; block def row 0 offset
    ld      c,d
    ld      a,[bc] ; tile value
    sub     a,128 ; tile data offset
    ld      [hl],a ; draw +1

    ; skip one screen buffer row
    ld      a,d ; save block
    ld      d,0
    ld      e,31
    add     hl,de
    ld      d,a ; restore block

    ; lower left
    ld      b,$22 ; block def row 0 offset
    ld      c,d
    ld      a,[bc] ; tile value
    sub     a,128 ; tile data offset
    ld      [hli],a ; draw + 32

    ; lower right
    ld      b,$23 ; block def row 0 offset
    ld      c,d
    ld      a,[bc] ; tile value
    sub     a,128 ; tile data offset
    ld      [hl],a ; draw + 33

    ; drawing ------------------------------------------
    pop     bc
    pop     de
    pop     hl

    ; next x block
    inc     hl
    inc     hl

    ; x loop end
    ld      a,c
    cp      0
    jr      nz,.loop_x

    ; y loop end (skip one 16x16 screen data row)
    push    de
    ld      d,0
    ld      e,44 ; 12 left + one full row of 32
    add     hl,de
    pop     de

    jp      .loop_y


.done:
    ld      hl,$C400
    ld      de,$9800
    ld      bc,512
    call    core_vram_cpy_vblank

    ret


; Collision Detection ---------------------------------------------------------
map_get_collision: ; b = x pos, c = y pos (both without scroll offsets) -> a = 1 if collision, 0 = no collision

    ; check for the bottom end of the screen
    ; if we index into the ram beyond this area we will read invalid data
    ; so we assume that there is never any collision beyond y 128
    ld      a,c
    cp      128
    jr      nc,.off_screen ; reset collision flag and indicate no collision

    ; save hl
    push    hl

    ; divide x by 8
    srl     b
    srl     b
    srl     b
    ld      a,b ; store x

    ; divide y by 8
    srl     c
    srl     c
    srl     c

    ; y * 32
    ld      h,0 
    ld      l,c

    add     hl,hl ; 2
    add     hl,hl ; 4
    add     hl,hl ; 8
    add     hl,hl ; 16
    add     hl,hl ; 32

    ; + mapRoomBuffer + x
    ld      b,$C4
    ld      c,a ; restore x
    add     hl,bc

    ; load tile value from background buffer
    ld      a,[hl]
    sub     128 ; convert into 0-255 range

    ; get offset into collision table
    ld      h,$24 ; $2400 + a
    ld      l,a
    ld      a,[hl]

    pop     hl

    ; check type of collision
    cp      1
    jp      z,.collision

    ; everything that is not solid has no collision
.no_collision:
    ld      [mapCollisionFlag],a
    ld      a,0
    ret

.collision:
    ld      a,1
    ret

.off_screen:
    ld      a,0
    ld      [mapCollisionFlag],a
    ret


; Animation -------------------------------------------------------------------
map_animate_tiles:

    ; check if there are any tile animations
    ld      a,TILE_ANIMATION_COUNT
    cp      0
    ret     z

    ; store state
    push    hl
    push    de
    push    bc

    ; loop and animate tiles
    ld      d,0
    ld      hl,mapAnimationIndexes
.animate:

    ; TODO check what animations are used in the current room and limit
    ; the updates?
    push    hl
    push    de

    ; load current delay value
    ld      hl,mapAnimationDelay
    ld      e,d
    ld      d,0
    add     hl,de
    ld      a,[hl] ; delay for the current tile

    ; check if we hit zero delay
    cp      0
    jp      nz,.delay ; if not decrease delay and animate the tile

    ; otherwise reset the delay and animate
    pop     de
    push    de
    push    hl
    ld      hl,DataTileAnimationDelay
    ld      e,d
    ld      d,0
    add     hl,de
    ld      a,[hl]
    pop     hl

    ; restore delay
    ld      [hl],a

    pop     de
    pop     hl

    ; update current tile animation index
    ld      a,[hl]
    inc     a
    and     %00000011 ; modulo 4
    ld      [hl],a

    ; update vram  (hl = source, de = dest, bc = size (16))
    push    hl
    push    de

    ; store animation index
    ld      e,a 

    ; get base tile value of the animation (base + d * 4)
    ld      hl,DataTileAnimation
    ld      b,0
    ld      c,d
    sla     c
    sla     c
    add     hl,bc
    ld      a,[hl] 
    ld      d,a ; base tile value $00 - $ff

    ; get the current tile value of the animation (base + d * 4 + a)
    ld      c,e 
    add     hl,bc
    ld      a,[hl] ; current tile value $00 - $ff

    ; get the target address in vram (multiply the base tile by 16 + $8800)
    ld      h,0
    ld      l,d
    add     hl,hl
    add     hl,hl
    add     hl,hl
    add     hl,hl
    ld      bc,$8800
    add     hl,bc
    ld      d,h
    ld      e,l

    ; get the current animation address (multiply the current (tile - $c0) by 16 + DataTileImg)
    sub     $c0 ; correct offset into ram buffer
    ld      h,0
    ld      l,a
    add     hl,hl
    add     hl,hl
    add     hl,hl
    add     hl,hl
    ld      bc,TILE_ANIMATION_BUFFER
    add     hl,bc

    ; set the length
    ld      b,0
    ld      c,16
    call    core_vram_cpy
    jp      .next

.delay:
    dec     a
    ld      [hl],a

.next:
    pop     de
    pop     hl
    ; end of vram update

    ; next animation
    inc     hl
    inc     d
    ld      a,d
    cp      TILE_ANIMATION_COUNT
    jp      nz,.animate
    ; end of loop

    ; restore state
    pop     bc
    pop     de
    pop     hl

    ret

