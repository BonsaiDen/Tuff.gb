SECTION "EntityLogic",ROM0

; Load the entity state from RAM or the map default and  ----------------------
; Set up sprite and initial data based on type handler ------------------------
entity_load:

    ; clear tile row mapping
    call    entity_reset_tile_row_mapping

    ; calculate offfset into stored state buffer (based on CURRENT room)
    ld      de,entityStoredState 
    ld      a,[mapRoomX]
    ld      h,a
    ld      a,[mapRoomY]
    ld      e,a
    call    math_mul8b
    inc     hl ; *= 2
    ld      d,h
    ld      e,l

    ; get offset for entity map data
    ld      hl,mapRoomUnpackBuffer + MAP_ROOM_SIZE
    ld      b,0

_entity_load_loop:

    ; get type / used
    ld      a,[hl]
    ld      c,a ; store byte
    and     %00111111 ; mask type bits
    cp      0
    jp      z,_entity_load_next ; entity is not set for room

    ; init base state
    push    hl
    call    entity_screen_offset_hl

    ; set type
    ld      a,c
    and     %00111111 ; mask type bits
    ld      [hli],a

    ; reset flags
    ld      a,0
    ld      [hli],a

    ; set direction 
    ld      a,c
    and     %11000000 ; mask type bits
    srl     a
    srl     a
    srl     a
    srl     a
    srl     a
    srl     a
    ld      [hl],a

    pop     hl

    ; check if the entity has stored state 
    ; state is 2 byte per entity [syyy yyyy] [xxxx xxxx]
    ld      a,[de]
    and     %10000000 ; y position is 0-127, first bit indicates whethe stored or not
    cp      128
    jp      nz,_entity_load_defaults; not stored, load defaults for position

_entity_load_stored:
    ; store index
    push    hl
    push    de

    ; get entity screen offset for b into hl
    call    entity_screen_offset_hl
    inc     hl ; skip type
    inc     hl ; skip flags
    inc     hl ; skip direction

    ; y position
    ld      a,[de]
    and     %01111111
    ld      [hl],a
    inc     de
    inc     hl

    ; x position
    ld      a,[de]
    ld      [hl],a

    ; restore index
    pop     de
    pop     hl
    jp      _entity_load_init

    ; load default data from map buffer
_entity_load_defaults:

    ; store index
    push    hl
    push    de
    
    ; get entity screen offset for b into hl
    call    entity_screen_offset_de
    inc     de ; skip type
    inc     de ; skip flags
    inc     de ; skip direction

    ; skip stored type and direction
    inc     hl

    ; load x/y value
    ld      a,[hl]
    and     %11110000 ; y position, just works we can skip the x16 here
    add     16 ; anchor at the bottom
    ld      [de],a
    inc     de

    ; x position
    ld      a,[hl]
    and     %00001111 ; need to multiply by 16 here
    sla     a
    sla     a
    sla     a
    sla     a
    add     8
    ld      [de],a

    ; restore index
    pop     de
    pop     hl

_entity_load_init:

    push    hl

    ld      a,c ; type / dir flags
    and     %00111111 ; mask type bits
    ld      l,a; store entity type
    call    entity_sprite_offset
    add     a,b ; offset + entity index
    ld      c,a ; store sprite index
    call    sprite_enable

    ; get screen entity offset
    call    entity_screen_offset_de
    push    bc
    push    de


    ; load entity sprite data into one of the available sprite row slots
    ; in the upper half of the sprite memory
    ld      a,[de] ; load type
    call    entity_load_tile_row ; -> a = tile offset
    ld      b,a ; load tile offset 
    ld      a,c ; load sprite index
    call    sprite_set_tile_offset


    ; call custom load handler
    ld      a,l
    dec     a; convert into 0 based offset
    ld      hl,entityLoadHandler
    add     a,a  ; multiply entity type by 4
    add     a,a
    add     a,l ; add a to hl
    ld      l,a
    adc     a,h
    sub     l
    ld      h,a
    push    bc
    jp      [hl]

_entity_load_handler_ret:; return target for load handler
    pop     bc
    pop     de
    ld      l,c

    ; set sprite position
    inc     de ; skip type
    inc     de ; skip flags
    inc     de ; skip direction

    ld      a,[de] ; load y position
    ld      c,a
    inc     de
    ld      a,[de] ; load x position
    ld      b,a
    ld      a,l ; load sprite index
    call    sprite_set_position

    pop     bc;  restore entity / loop index
    pop     hl

_entity_load_next:
    inc     de
    inc     de
    inc     hl
    inc     hl

    inc     b
    ld      a,b
    cp      ENTITY_PER_ROOM
    jp      nz,_entity_load_loop
    ret



; Store the entity state into RAM based on the type handler -------------------
; Also reset the entity sprite and screen data --------------------------------
entity_store:

    ; calculate offfset into stored state buffer (based on LAST room)
    ld      de,entityStoredState 
    ld      a,[mapRoomLastX]
    ld      h,a
    ld      a,[mapRoomLastY]
    ld      e,a
    call    math_mul8b
    inc     hl ; *= 2
    ld      d,h
    ld      e,l

    ld      hl,entityScreenState
    ld      b,0

.loop:
    ld      a,[hl]
    cp      0
    jp      z,.skip; not loaded

    ; disable sprite 
    call    entity_sprite_offset
    add     a,b; offset + entity index
    call    sprite_disable
    ;call    sprite_unset_mirror

    ; unset type
    ld      a,0
    ld      [hl],a

    ; hl = screen state, de = stored state
    inc     hl ; skip type [0]
    inc     hl ; skip flag [1]
    inc     hl ; skip direction [2]

    ; store y position and active flag [3]
    ld      a,[hli]
    or      %10000000
    ld      [de],a
    inc     de

    ; store x position
    ld      a,[hli]
    ld      [de],a
    inc     de

    inc     hl
    inc     hl
    inc     hl
    jp      .next

.skip:
    inc     de
    inc     de
    inc     hl
    inc     hl
    inc     hl
    inc     hl
    inc     hl
    inc     hl
    inc     hl
    inc     hl

.next:
    inc     b
    ld      a,b
    cp      ENTITY_PER_ROOM
    jp      nz,.loop
    ret



; Update the on screen entites based on the type handler ----------------------
entity_update:
    ret
    ld      de,entityScreenState
    ld      b,0

entity_update_loop:

    ; load type / active
    ld      a,[de]
    cp      0
    jp      z,_entity_update_skip; not active skip
    ld      l,a ; store type

    ; get sprite index
    call    entity_sprite_offset
    add     a,b; offset + entity index
    ld      h,a; store sprite index

    ; store counter, screen state address 
    push    bc
    push    hl
    push    de

    ; invoke custom entity update handler
    ld      a,l
    dec     a; convert into 0 based offset
    ld      hl,entityUpdateHandler
    add     a,a  ; multiply entity type by 4
    add     a,a
    add     a,l ; add a to hl
    ld      l,a
    adc     a,h
    sub     l
    ld      h,a
    push    bc
    jp      [hl]

_entity_update_handler_ret: ; upate handler return targer
    pop     de
    pop     hl

    inc     de; skip type
    inc     de; skip flags
    inc     de; skip direction

    ld      a,[de] ; x position
    ld      c,a
    inc     de

    ld      a,[de] ; y position
    ld      b,a
    ld      a,h  
    call    sprite_set_position
    inc     de

    pop     bc

    inc     de
    inc     de
    inc     de
    jp      _entity_update_next

_entity_update_skip:
    inc     de
    inc     de
    inc     de
    inc     de
    inc     de
    inc     de
    inc     de
    inc     de

_entity_update_next:
    inc     b
    ld      a,b
    cp      ENTITY_PER_ROOM
    jp      nz,entity_update_loop
    ret



; Entity Handlers -------------------------------------------------------------
; -----------------------------------------------------------------------------
entity_handler_load: ; generic, b = entity index, c = sprite index
    ld      a,c
    ld      b,0
    call    sprite_set_tile_index
    jp      _entity_load_handler_ret


entity_handler_load_empty:
    ld      a,c
    ld      b,0
    call    sprite_set_tile_index
    jp      _entity_load_handler_ret
    

entity_handler_update: ; generic, b = entity index, c = sprite index, de = screen data
    jp      _entity_update_handler_ret



; Handler Tables --------------------------------------------------------------
; -----------------------------------------------------------------------------
entityLoadHandler:
    jp      entity_handler_load
    nop
    jp      entity_handler_load_empty
    nop

            
entityUpdateHandler:
    jp      entity_handler_update
    nop
    jp      entity_handler_update
    nop
    


; Entity Sprite Handling ------------------------------------------------------
; -----------------------------------------------------------------------------
entity_sprite_offset: ; a = sprite type -> a = background offset
    call    entity_defintion
    and     %10000000
    cp      %10000000
    jp      z,.foreground
    ld      a,ENTITY_BG_SPRITE_INDEX
    ret

.foreground:
    ld      a,ENTITY_FG_SPRITE_INDEX
    ret


entity_reset_tile_row_mapping:
    ld      hl,entityTileRowMap
    ld      a,255
    ld      [hli],a
    ld      [hli],a
    ld      [hli],a
    ld      [hl],a
    ret


entity_load_tile_row: ; a = entity type -> a = sprite tile offset for the entity

    push    de
    push    hl
    push    bc

    call    entity_defintion
    and     %01111111 ; mask tile source row
    ld      c,a ; store tile row into c
    
    ; start search loop for tilerow map
    ld      b,0
    ld      hl,entityTileRowMap

.loop:
    ld      a,[hl]

    ; check if tilerow at this offset is the row required by the entity
    cp      c 
    jp      z,.done

    ; otherwise check if we got a free slow in vram to put the tilerow into
    cp      255
    jp      z,.load

    inc     hl
    inc     b
    cp      4
    jp      nz,.loop

    ; FIXME 
    ; we should never end up here because we got at most 4 different entity
    ; sprite rows
    ld      b,0; failsafe

.load: ; b is the index we we'll be mapping into, c is the sprite row of the entity that needs to be loaded
    
    ; mark tilerow as used
    ld      a,c ; c = sprite row index used for the row at [hl]
    ld      [hl],a

    ; load sprite row for entity
    ld      hl,DataEntityRows
    ld      de,$8400
    ld      a,ENTITY_SPRITE_ROWS * 2
    call    map_load_sprite_row

.done:
    ld      a,b ; load the row into which the sprite data got loaded
    add     a,a ; x4
    add     a,a
    add     a,16 ; skip the first 4 rows in vram

    pop     bc
    pop     hl
    pop     de

    ret



; Helper ----------------------------------------------------------------------
entity_screen_offset_hl: ; b = entity index
    push    bc

    ld      c,b
    ld      b,0
    ld      hl,entityScreenState
    sla     c ; multiply by 8
    sla     c
    sla     c
    add     hl,bc

    pop     bc
    ret


entity_screen_offset_de: ; b = entity index
    push    hl
    push    bc

    ld      c,b
    ld      b,0
    ld      hl,entityScreenState
    sla     c ; multiply by 8
    sla     c
    sla     c
    
    add     hl,bc
    ld      d,h
    ld      e,l

    pop     bc
    pop     hl
    ret


entity_defintion: ; a = sprite type
    push    hl
    ld      hl,EntityDefinitions

    dec     a; convert into zero based index

    ; a x 8
    add     a
    add     a
    add     a

    ; hl + a
    add     a,l
    ld      l,a
    adc     a,h
    sub     l
    ld      h,a

    ; load definition
    ld      a,[hl]
    pop     hl
    ret

