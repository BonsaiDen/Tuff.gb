; Core Loop -------------------------------------------------------------------
core_loop:

    halt    ; stop system clock, return from halt when interrupted
    nop     ; If interrupts are disabled halt jumps one instruction!

    ; Wait for V-Blank
    ld      a,[coreVBlankDone]
    and     a                   ; V-Blank interrupt ?
    jr      z,core_loop         ; No, some other interrupt
    xor     a
    ld      [coreVBlankDone],a  ; Clear V-Blank flag
                                
    ; Fetch Joypad State
    jp      core_input
core_loop_after_input:

    ; run the 1.5 frame loop
    ld      a,[coreHalfTick]
    cp      0
    jp      nz,.wait_one_half
    call    game_loop_one_half

    ; every other tick we switch the delay between 0 or 1 to 
    ; emulate moving by 1.5 pixels every frame
    ld      a,[coreHalfTickSwitch]
    ld      [coreHalfTick],a

    ; switch between 0 and 1
    ld      a,[coreHalfTickSwitch]
    xor     a
    ld      [coreHalfTickSwitch],a
    jp      .every_frame

.wait_one_half:
    dec     a
    ld      [coreHalfTick],a

.every_frame:
    call    game_loop ; run the main loop 
    jp      core_loop

